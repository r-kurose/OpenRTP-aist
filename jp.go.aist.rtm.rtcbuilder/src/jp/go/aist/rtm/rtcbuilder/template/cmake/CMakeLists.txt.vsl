cmake_minimum_required(VERSION 2.8)

project(${rtcParam.name})
string(TOLOWER ${dol}{PROJECT_NAME} PROJECT_NAME_LOWER)
include("${dol}{PROJECT_SOURCE_DIR}/cmake/utils.cmake")
set(PROJECT_VERSION ${rtcParam.version} CACHE STRING "${rtcParam.name} version")
set(UPGRADE_GUID "")
DISSECT_VERSION()
set(PROJECT_SHORT_VER ${dol}{PROJECT_VERSION_MAJOR}${dol}{PROJECT_VERSION_MINOR}${dol}{PROJECT_VERSION_REVISION})
set(PROJECT_DESCRIPTION "${rtcParam.description}")
set(PROJECT_VENDOR "${rtcParam.vender}")
#if( ${rtcParam.docCreator.length()} > 0 )
set(PROJECT_MAINTAINER "${rtcParam.docCreator}")
#else
set(PROJECT_MAINTAINER "unknown")
#end
set(PROJECT_TYPE "c++/${rtcParam.category}")

find_package(OpenRTM)
set(RTM_VER ${dol}{OPENRTM_VERSION})
set(RTM_SHORT_VER ${dol}{OPENRTM_VERSION_MAJOR}${dol}{OPENRTM_VERSION_MINOR}${dol}{OPENRTM_VERSION_PATCH})

function(get_dist ARG0)
 if(NOT ${dol}{CMAKE_SYSTEM_NAME} MATCHES "Linux")
   set(${dol}{ARG0} ${dol}{CMAKE_SYSTEM_NAME} PARENT_SCOPE)
   return()
 endif()
 foreach(dist Debian Ubuntu RedHat Fedora CentOS Raspbian Alpine)
   execute_process(
     COMMAND grep ${dol}{dist} -s /etc/issue /etc/os-release /etc/redhat-release /etc/system-release
     OUTPUT_VARIABLE dist_name
     )
   if(${dol}{dist_name} MATCHES ${dol}{dist})
     set(${dol}{ARG0} ${dol}{dist} PARENT_SCOPE)
     return()
   endif()
 endforeach()
endfunction(get_dist)

function(get_pkgmgr ARG0)
 get_dist(DIST_NAME)
 if(${dol}{DIST_NAME} MATCHES "Debian" OR
     ${dol}{DIST_NAME} MATCHES "Ubuntu" OR
     ${dol}{DIST_NAME} MATCHES "Raspbian")
    set(${dol}{ARG0} "DEB" PARENT_SCOPE)
    return()
 endif()
 if(${dol}{DIST_NAME} MATCHES "RedHat" OR
    ${dol}{DIST_NAME} MATCHES "Fedora" OR
    ${dol}{DIST_NAME} MATCHES "CentOS")
    set(${dol}{ARG0} "RPM" PARENT_SCOPE)
    return()
  endif()
  if(${dol}{DIST_NAME} MATCHES "Alpine")
    set(${dol}{ARG0} "APK" PARENT_SCOPE)
    return()
  endif()
endfunction(get_pkgmgr)

get_dist(DIST_NAME)
MESSAGE(STATUS "Distribution is ${dol}{DIST_NAME}")

get_pkgmgr(PKGMGR)
if(PKGMGR AND NOT LINUX_PACKAGE_GENERATOR)
 set(LINUX_PACKAGE_GENERATOR ${dol}{PKGMGR})
 if(${dol}{PKGMGR} MATCHES "DEB")
   execute_process(COMMAND dpkg --print-architecture
     OUTPUT_VARIABLE CPACK_DEBIAN_PACKAGE_ARCHITECTURE
     OUTPUT_STRIP_TRAILING_WHITESPACE)
   message(STATUS "Package manager is ${dol}{PKGMGR}. Arch is ${dol}{CPACK_DEBIAN_PACKAGE_ARCHITECTURE}.")
 endif()
 if(${dol}{PKGMGR} MATCHES "RPM")
   execute_process(COMMAND uname "-m"
     OUTPUT_VARIABLE CPACK_RPM_PACKAGE_ARCHITECTURE
     OUTPUT_STRIP_TRAILING_WHITESPACE)
   message(STATUS "Package manager is ${dol}{PKGMGR}. Arch is ${dol}{CPACK_RPM_PACKAGE_ARCHITECTURE}.")
 endif()
 if(${dol}{PKGMGR} MATCHES "APK")
   execute_process(COMMAND apk --print-arch
     OUTPUT_VARIABLE CPACK_RPM_PACKAGE_ARCHITECTURE
     OUTPUT_STRIP_TRAILING_WHITESPACE)
   message(STATUS "Package manager is ${dol}{PKGMGR}. Arch is ${dol}{CPACK_RPM_PACKAGE_ARCHITECTURE}.")
 endif()
endif()

${sharp} Add an "uninstall" target
CONFIGURE_FILE ("${dol}{PROJECT_SOURCE_DIR}/cmake/uninstall_target.cmake.in"
    "${dol}{PROJECT_BINARY_DIR}/uninstall_target.cmake" IMMEDIATE @ONLY)
ADD_CUSTOM_TARGET (${dol}{PROJECT_NAME}_uninstall "${dol}{CMAKE_COMMAND}" -P
    "${dol}{PROJECT_BINARY_DIR}/uninstall_target.cmake")

${sharp}option(BUILD_EXAMPLES "Build and install examples" OFF)
option(BUILD_DOCUMENTATION "Build the documentation" OFF)
${sharp}option(BUILD_TESTS "Build the tests" OFF)
${sharp}option(BUILD_TOOLS "Build the tools" OFF)
option(BUILD_IDL "Build and install idl" ON)
option(BUILD_SOURCES "Build and install sources" OFF)

option(STATIC_LIBS "Build static libraries" OFF)
if(STATIC_LIBS)
    set(LIB_TYPE STATIC)
else(STATIC_LIBS)
    set(LIB_TYPE SHARED)
endif(STATIC_LIBS)

if (${dol}{CMAKE_SYSTEM_NAME} MATCHES "Darwin")
   ${sharp} Mac OS X specific code
   SET(CMAKE_CXX_COMPILER "g++")
   SET(CMAKE_MACOSX_RPATH 1)
endif (${dol}{CMAKE_SYSTEM_NAME} MATCHES "Darwin")


${sharp} Set up installation directories
if(WIN32)
   set(OPENRTM_SHARE_PREFIX "OpenRTM-aist/${dol}{RTM_VER}/Components/${dol}{PROJECT_TYPE}")
   set(INSTALL_PREFIX ${dol}{PROJECT_NAME})
   if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
      set(CMAKE_INSTALL_PREFIX "${dol}{OPENRTM_DIR}Components/${dol}{PROJECT_TYPE}/${dol}{PROJECT_NAME}" CACHE PATH "..." FORCE)
   endif()
else(WIN32)
   set(OPENRTM_SHARE_PREFIX "share/openrtm-${dol}{OPENRTM_VERSION_MAJOR}.${dol}{OPENRTM_VERSION_MINOR}")
   set(INSTALL_PREFIX "${dol}{OPENRTM_SHARE_PREFIX}/components/${dol}{PROJECT_TYPE}/${dol}{PROJECT_NAME}")
endif(WIN32)

${sharp} Universal settings
${sharp}enable_testing()

${sharp} Subdirectories
add_subdirectory(cmake)
if(BUILD_DOCUMENTATION)
    add_subdirectory(doc)
endif(BUILD_DOCUMENTATION)

${sharp}if(BUILD_EXAMPLES)
${sharp}    add_subdirectory(examples)
${sharp}endif(BUILD_EXAMPLES)

if(BUILD_IDL)
    add_subdirectory(idl)
endif(BUILD_IDL)

file(GLOB IDL_FILES "${dol}{CMAKE_CURRENT_SOURCE_DIR}/idl/*.idl")
if(IDL_FILES)
    install(FILES ${dol}{IDL_FILES} DESTINATION ${dol}{INSTALL_PREFIX}/idl
        COMPONENT component)
endif(IDL_FILES)

add_subdirectory(include)
MAP_ADD_STR(headers  "include/" comp_hdrs)
add_subdirectory(src)

${sharp}if(BUILD_TESTS)
${sharp}    add_subdirectory(test)
${sharp}endif(BUILD_TESTS)

${sharp}if(BUILD_TOOLS)
${sharp}    add_subdirectory(tools)
${sharp}endif(BUILD_TOOLS)

if(BUILD_SOURCES)
    add_subdirectory(include)
    add_subdirectory(src)
endif(BUILD_SOURCES)

${sharp} Package creation
${sharp} By default, do not warn when built on machines using only VS Express:
IF(NOT DEFINED CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_NO_WARNINGS)
SET(CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_NO_WARNINGS ON)
ENDIF()
include(InstallRequiredSystemLibraries)
set(PROJECT_EXECUTABLES ${dol}{PROJECT_NAME}Comp
    "${dol}{PROJECT_NAME}Comp.exe")

set(cpack_options "${dol}{PROJECT_BINARY_DIR}/cpack_options.cmake")

configure_file("${dol}{PROJECT_SOURCE_DIR}/cmake/cpack_options.cmake.in"
    ${dol}{cpack_options} @ONLY)

set(CPACK_PROJECT_CONFIG_FILE ${dol}{cpack_options})
include(${dol}{CPACK_PROJECT_CONFIG_FILE})
include(CPack)


